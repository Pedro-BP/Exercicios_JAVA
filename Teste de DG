package com.mycompany.projeto_rpg;

import java.util.Random;

// Estrutura Base - Metodos
public class Dungeon {

    private char[][] mapa;
    private int tamanho;
    private int jogadorX, jogadorY;
    private int saidaX, saidaY;
    private int chefeX, chefeY;
    private boolean[][] visitado;
    private Random random = new Random();

    public Dungeon(int nivel) {
        this.tamanho = calcularTamanho(nivel);
        this.mapa = new char[tamanho][tamanho];
        this.visitado = new boolean[tamanho][tamanho];
        gerarDungeon();
    }

    private int calcularTamanho(int nivel) {
        // 10 níveis de dungeon, de 5x5 a 15x15 por exemplo
        int indice = Math.min(nivel / 10, 9);
        return 5 + indice;
    }

    private void gerarDungeon() {
        // Preenche tudo como desconhecido
        for (int i = 0; i < tamanho; i++) {
            for (int j = 0; j < tamanho; j++) {
                mapa[i][j] = '.';
            }
        }

        // Gera entrada nas bordas
        int borda = random.nextInt(4);
        switch (borda) {
            case 0 -> {
                jogadorX = 0;
                jogadorY = random.nextInt(tamanho);
            } // topo
            case 1 -> {
                jogadorX = tamanho - 1;
                jogadorY = random.nextInt(tamanho);
            } // baixo
            case 2 -> {
                jogadorX = random.nextInt(tamanho);
                jogadorY = 0;
            } // esquerda
            case 3 -> {
                jogadorX = random.nextInt(tamanho);
                jogadorY = tamanho - 1;
            } // direita
        }

        mapa[jogadorX][jogadorY] = 'E';
        visitado[jogadorX][jogadorY] = true;

        // Gera saída e chefe aleatoriamente em locais diferentes
        do {
            saidaX = random.nextInt(tamanho);
            saidaY = random.nextInt(tamanho);
        } while (saidaX == jogadorX && saidaY == jogadorY);

        do {
            chefeX = random.nextInt(tamanho);
            chefeY = random.nextInt(tamanho);
        } while ((chefeX == jogadorX && chefeY == jogadorY) || (chefeX == saidaX && chefeY == saidaY));
    }

    public void mover(char direcao) {
        int novoX = jogadorX, novoY = jogadorY;

        switch (direcao) {
            case 'w' ->
                novoX--;
            case 's' ->
                novoX++;
            case 'a' ->
                novoY--;
            case 'd' ->
                novoY++;
            default -> {
                System.out.println("Comando inválido!");
                return;
            }
        }

        if (novoX < 0 || novoX >= tamanho || novoY < 0 || novoY >= tamanho) {
            System.out.println("Você não pode sair da dungeon!");
            return;
        }

        jogadorX = novoX;
        jogadorY = novoY;
        visitado[jogadorX][jogadorY] = true;
    }

public void mostrar() {
    // Códigos ANSI de cor
    final String RESET = "\u001B[0m";
    final String VERDE = "\u001B[32m";
    final String VERMELHO = "\u001B[31m";
    final String AZUL = "\u001B[34m";
    final String CINZA = "\u001B[37m";
    final String AMARELO = "\u001B[33m";
    final String ROXO = "\u001B[35m";

    System.out.println("\n" + ROXO + "╔" + "═══".repeat(tamanho) + "╗" + RESET);
    for (int i = 0; i < tamanho; i++) {
        System.out.print(ROXO + "║" + RESET);
        for (int j = 0; j < tamanho; j++) {
            if (i == jogadorX && j == jogadorY) {
                System.out.print(AMARELO + " & " + RESET); // jogador
            } else if (!visitado[i][j]) {
                System.out.print(CINZA + " * " + RESET); // área não explorada
            } else if (i == saidaX && j == saidaY) {
                System.out.print(AZUL + " ¬ " + RESET); // saída
            } else if (i == chefeX && j == chefeY) {
                System.out.print(VERMELHO + " $ " + RESET); // chefe
            } else {
                System.out.print(VERDE + " + " + RESET); // área explorada
            }
        }
        System.out.println(ROXO + "║" + RESET);
    }
    System.out.println(ROXO + "╚" + "═══".repeat(tamanho) + "╝" + RESET);
}

/*
    public void mostrar() {
    System.out.println("\n╔" + "═══".repeat(tamanho) + "╗");
    for (int i = 0; i < tamanho; i++) {
        System.out.print("║");
        for (int j = 0; j < tamanho; j++) {
            if (i == jogadorX && j == jogadorY) {
                System.out.print(" & "); // jogador
            } else if (!visitado[i][j]) {
                System.out.print(" * "); // área não explorada
            } else if (i == saidaX && j == saidaY) {
                System.out.print(" ¬ "); // saída
            } else if (i == chefeX && j == chefeY) {
                System.out.print(" $ "); // chefe
            } else {
                System.out.print(" + "); // área explorada
            }
        }
        System.out.println("║");
    }
    System.out.println("╚" + "═══".repeat(tamanho) + "╝");
}
*/
    public boolean chegouNaSaida() {
        return jogadorX == saidaX && jogadorY == saidaY;
    }

    public boolean encontrouChefe() {
        return jogadorX == chefeX && jogadorY == chefeY;
    }
}

====================================================================================================================================================================================

package com.mycompany.projeto_rpg;

import java.util.Random;
import java.util.Scanner;

public class CombateBoss {

    private int vidaJogador;
    private int vidaBoss;
    private int ataqueJogador;
    private int ataqueBoss;
    private int nivel;
    private Random random = new Random();

    public CombateBoss(int nivel) {
        this.nivel = nivel;
        gerarAtributos();
    }

    private void gerarAtributos() {
        // Atributos escalam com o nível
        vidaJogador = 100 + (nivel * 5);
        ataqueJogador = 10 + (nivel / 2);

        // Boss é mais forte proporcionalmente
        vidaBoss = 80 + (nivel * 10);
        ataqueBoss = 8 + (nivel / 1.5);
    }

    public boolean iniciarCombate() {
        Scanner sc = new Scanner(System.in);

        System.out.println("\nO CHEFE APARECEU! ");
        System.out.println("Um inimigo poderoso está diante de você!\n");

        while (vidaJogador > 0 && vidaBoss > 0) {
            System.out.println("====================================");
            System.out.println("Sua vida: " + vidaJogador + " | Vida do Chefe: " + vidaBoss);
            System.out.println("====================================");
            System.out.println("[1] Atacar");
            System.out.println("[2] Defender");
            System.out.println("[3] Curar");
            System.out.println("[4] Fugir");
            System.out.print("Escolha sua ação: ");

            int escolha = sc.nextInt();
            System.out.println();

            switch (escolha) {
                case 1 -> atacar();
                case 2 -> defender();
                case 3 -> curar();
                case 4 -> {
                    System.out.println("Você tenta fugir...");
                    if (random.nextInt(100) < 30) {
                        System.out.println("Você conseguiu escapar!");
                        return false;
                    } else {
                        System.out.println("O chefe bloqueou sua fuga!");
                    }
                }
                default -> System.out.println("Comando inválido!");
            }

            if (vidaBoss <= 0) {
                System.out.println("Você derrotou o chefe! Parabéns!");
                return true;
            }

            // Turno do chefe
            ataqueDoChefe();
        }

        if (vidaJogador <= 0) {
            System.out.println("Você foi derrotado pelo chefe...");
            return false;
        }

        return true;
    }

    private void atacar() {
        int dano = ataqueJogador + random.nextInt(6) - 2;
        System.out.println("Você ataca e causa " + dano + " de dano!");
        vidaBoss -= Math.max(dano, 0);
    }

    private void defender() {
        int dano = Math.max((ataqueBoss / 2) - random.nextInt(3), 0);
        System.out.println("Você se defende! Recebe apenas " + dano + " de dano.");
        vidaJogador -= dano;
    }

    private void curar() {
        int cura = 10 + random.nextInt(10);
        vidaJogador += cura;
        System.out.println("Você se cura em " + cura + " pontos de vida.");
    }

    private void ataqueDoChefe() {
        int dano = ataqueBoss + random.nextInt(6) - 2;
        System.out.println("O chefe ataca e causa " + dano + " de dano!");
        vidaJogador -= Math.max(dano, 0);
    }
}

====================================================================================================================================================================================

package com.mycompany.projeto_rpg;

import java.util.Scanner;

//Classe principal para testar

public class Jogo {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Dungeon dungeon = new Dungeon(10);

        while (true) {
            dungeon.mostrar();
            if (dungeon.chegouNaSaida()) {
                System.out.println("Você encontrou uma ROTA DE FUGA!");
                System.out.println("\nVocê deseja SAIR ou continuar EXPLORANDO?");
                System.out.println("[1] SAIR | [2] EXPLORARd");
                int resp = sc.nextInt();
                System.out.println("\n");
                if (resp == 1) {
                    break;
                } else {
                    dungeon.mostrar();
                }
            }
            if (dungeon.encontrouChefe()) {
                System.out.println("Você encontrou o CHEFE! Prepare-se para lutar!");
                CombateBoss combate = new CombateBoss(10); // passa o nível do personagem
                boolean venceu = combate.iniciarCombate();

                if (venceu) {
                    System.out.println("\nVocê conquistou esta dungeon! 🏆");
                } else {
                    System.out.println("\nFim de jogo...");
                }
                break;
            }

            System.out.print("Mover (w/a/s/d): ");
            char comando = sc.next().charAt(0);
            dungeon.mover(comando);
        }
    }
}
